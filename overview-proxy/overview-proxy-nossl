#!/bin/ash -m

# We're a simple "supervisor" script here. Die when Docker commands us.
# Inspiration from:
# http://veithen.github.io/2014/11/16/sigterm-propagation.html
kill_children() {
  trap - INT TERM
  echo "kill -9 $SYSLOG_PID $HAPROXY_PID"
  kill -9 $SYSLOG_PID $HAPROXY_PID
}
trap 'kill_children' TERM INT

# Run syslog, to listen to Haproxy's logs. (Haproxy does not write log files)
# Syslog output looks like this:
# Nov  2 16:44:06 a70838386ddb local0.notice haproxy[8]: Proxy plugin_file_browser started.
# ... but we only want the part after "]". So we'll cut.
(syslogd -n -O - | cut -d']' -f2- | cut -b3-) &
SYSLOG_PID=$!

# Run haproxy
haproxy -f /haproxy-nossl.cfg &
HAPROXY_PID=$!

wait $HAPROXY_PID
# Normally haproxy will run forever. This "wait" will return when:
# * haproxy exits abnormally. Most commonly: a config error.
# * Docker sends INT or TERM. That will make our "trap" invoke
#   kill_children, which will kill $HAPROXY_PID.

# -CLEANUP-
# "wait" can return before the children are dead, in Bash: it returns
# immediately after the "trap". I'm not sure about Busybox's Ash. But no
# matter: if we've reached this point in the script, we want everything
# to die.
kill_children
wait $HAPROXY_PID $SYSLOG_PID
